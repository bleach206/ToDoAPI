<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ToDoAPI</name>
    </assembly>
    <members>
        <member name="T:ToDoAPI.Controllers.ToDoController">
            <summary>
            Doing the things that need to be done
            </summary>
        </member>
        <member name="M:ToDoAPI.Controllers.ToDoController.#ctor(Service.Interface.IToDoService,Microsoft.Extensions.Logging.ILogger{ToDoAPI.Controllers.ToDoController},Common.Interface.IETagCache)">
            <summary>
            to constructor for injection
            </summary>
            <param name="service"></param>
            <param name="logger"></param>
            <param name="cache"></param>
        </member>
        <member name="M:ToDoAPI.Controllers.ToDoController.Get(System.Int32,Model.GetListsDTO)">
            <summary>
            returns all of the available lists
            </summary>
            <remarks>Gets a list of user to do. <br />  id: user id. <br />  skip: number of records to skip for pagination. (default is 1) <br/>  limit: the maximum number of records to return (Max is 50 default to 50) </remarks>
            <param name="id">user Id</param>
            <param name="getListsDTO">query paramter DTO</param>       
            <response code="200">successful operation</response>
            <response code="304">Not Modified</response>
            <response code="400">Invalid input</response>
            <response code="404">List not found</response>
            <response code="500">server error</response>
            <returns>Response code and dto object</returns>
        </member>
        <member name="M:ToDoAPI.Controllers.ToDoController.Get(System.Int32,System.Int32)">
            <summary>
            return the specified todo
            </summary>
            <remarks>Parameters</remarks>   
            <param name="id">User Id</param>
            <param name="toDoId">The unique identifier of to do</param>
            <response code="200">successful operation</response>
            <response code="304">Not Modified</response>
            <response code="400">Invalid id supplied</response>
            <response code="404">List not found</response>
            <response code="500">server error</response>
            <returns>Response code and dto object</returns>
        </member>
        <member name="M:ToDoAPI.Controllers.ToDoController.Create(System.Int32,Model.CreateDTO)">
            <summary>
            creates a to do
            </summary>
            <remarks>Adds a to do into the system</remarks>
            <param name="id">User Id</param>
            <param name="toDo">ToDo list to add</param>
            <response code="201">item created</response>
            <response code="400">invalid input, object invalid</response>
            <response code="409">an existing item already exists</response>
            <response code="500">server error</response>
            <returns>Response code and dto object</returns>
        </member>
        <member name="M:ToDoAPI.Controllers.ToDoController.CreateList(System.Int32,System.Collections.Generic.IEnumerable{Model.CreateDTO})">
            <summary>
            creates a to do list
            </summary>
            <remarks>Adds a to do list into the system</remarks>
            <param name="id">User Id</param>
            <param name="list">To do lists</param>
            <response code="201">item created</response>
            <response code="400">invalid input, object invalid</response>
            <response code="409">an existing item already exists</response>
            <response code="500">server error</response>
            <returns>Response code and dto object</returns>
        </member>
        <member name="M:ToDoAPI.Controllers.ToDoController.Put(System.Int32,Model.ToDoUpdateDTO)">
            <summary>
            Update to do Name and Description
            </summary>
            <remarks>update to do</remarks>
            <param name="id">todo id</param>
            <param name="toDo">to do to update</param>
            <response code="204">to do updated</response>
            <response code="400">invalid input, object invalid</response>
            <response code="404">Resource not found</response>
            <response code="500">server error</response>
            <returns>Response code and dto object</returns>       
        </member>
        <member name="M:ToDoAPI.Controllers.ToDoController.PutUpdateName(System.Int32,Model.UpdateNameDTO)">
            <summary>
            Update to do Name
            </summary>
            <remarks>update to do name</remarks>
            <param name="id">To do id</param>
            <param name="updateNameDTO"> dto holding name and user id</param>        
            <response code="204">to do updated</response>
            <response code="400">invalid input, object invalid</response>
            <response code="404">Resource not found</response>
            <response code="500">server error</response>
            <returns>no content</returns>
        </member>
        <member name="M:ToDoAPI.Controllers.ToDoController.PutUpdateDescription(System.Int32,Model.UpdateDescriptionDTO)">
            <summary>
            Update to do description
            </summary>
            <remarks>update to do description</remarks>
            <param name="id">To do id</param>
            <param name="updateDescriptionDTO">dto for user id and description</param>   
            <response code="204">to do updated</response>
            <response code="400">invalid input, object invalid</response>
            <response code="404">Resource not found</response>
            <response code="500">server error</response>
            <returns>no content</returns>
        </member>
        <member name="M:ToDoAPI.Controllers.ToDoController.Delete(System.Int32,System.Int32)">
            <summary>
            delete to do
            </summary>
            <remarks>delete to do</remarks>
            <param name="id"></param>
            <param name="userId"></param>
            <response code="204">to do deleted</response>
            <response code="400">invalid input, object invalid</response>
            <response code="404">Resource not found</response>
            <response code="500">server error</response>
            <returns>no content</returns>
        </member>
        <member name="T:ToDoAPI.Program">
            <summary>
            main class program web host
            </summary>
        </member>
        <member name="M:ToDoAPI.Program.Main(System.String[])">
            <summary>
            main for console
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:ToDoAPI.Program.CreateWebHostBuilder(System.String[])">
            <summary>
            middle ware
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:ToDoAPI.Startup">
            <summary>
            use to be gobal middleware pipeline
            </summary>
        </member>
        <member name="P:ToDoAPI.Startup.Configuration">
            <summary>
            configuration
            </summary>
        </member>
        <member name="M:ToDoAPI.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            constructor
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:ToDoAPI.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services"></param>  
        </member>
        <member name="M:ToDoAPI.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param> 
        </member>
        <member name="M:ToDoAPI.Startup.ConfigureIOC(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            setup IOC
            </summary>
            <param name="services"></param>
        </member>
    </members>
</doc>
